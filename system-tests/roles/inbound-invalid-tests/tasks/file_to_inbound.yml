---
#--------------------------------------------------
# generate random values for XML files:
- set_fact: receiver_id=9908:987987987
- set_fact: receiver_endpoint_id=987987987
- set_fact: receiver_company_id_vat=987987987MVA
- set_fact: receiver_company_id_orgnr=987987987
- set_fact: receiver_name="{{ 999999999 | random }}"
- set_fact: sender_id=9908:987987987
- set_fact: sender_endpoint_id=987987987
- set_fact: sender_company_id_vat=987987987MVA
- set_fact: sender_company_id_orgnr=987987987
- set_fact: sender_name="{{ 999999999 | random }}"
- set_fact: transmissionId="{{ 999999999 | random | to_uuid }}"

- debug: var=receiver_id
- debug: var=receiver_endpoint_id
- debug: var=receiver_company_id_vat
- debug: var=receiver_company_id_orgnr
- debug: var=receiver_name
- debug: var=sender_id
- debug: var=sender_endpoint_id
- debug: var=sender_company_id_vat
- debug: var=sender_company_id_orgnr
- debug: var=sender_name
- debug: var=transmissionId
#--------------------------------------------------
- name: Creates directory for test files
  become: "{{sudo}}"
  become_user: "{{user}}"
  file: 
    path: /tmp/system-tests-tmp/ 
    state: directory
    owner: "{{ user }}"

- set_fact: uuid="{{99999 | random | to_uuid}}"
- debug: var=uuid

- name: copy test files
  become: "{{sudo}}"
  become_user: "{{user}}"
  template:
    src: "{{ file }}"
    dest: "/tmp/system-tests-tmp/{{ file | basename }}-{{ uuid }}.xml"

- name: send file via script to inbound module
  shell: docker run --rm -i --network peppol_back -v /tmp:/tmp -v /peppol:/peppol d-l-tools.ocnet.local:443/peppol2.0/inbound:latest ./send-to-peppol.sh -f "/tmp/system-tests-tmp/{{ file|basename }}-{{ uuid }}.xml" -u http://inbound:8080/peppol-ap-inbound/as2
#  shell: docker run -i --network peppol_back -v /test-materials:/test-materials -v /peppol:/peppol d-l-tools.ocnet.local:443/peppol2.0/inbound:latest ./send-to-peppol.sh -f "{{ file }}" -u http://inbound:8080/peppol-ap-inbound/as2
#inbound to swarm makes this obsolite->  shell: docker exec inbound ./send-to-peppol.sh -f "{{file}}"
  register: inbound_output
- set_fact: file="{{file}}"
- debug: var=file

- pause:
    seconds: 10

- name: get transmissionResult for "{{file}}"
  shell: echo "{{inbound_output.stdout_lines[-10:]}}" | grep '.Oxalis@.*' | awk -F" transmission " '{print $1}'
  register: transmissionResult
- set_fact: transmissionResult="{{transmissionResult.stdout}}"
- debug: var=transmissionResult

- name: ensure that transmissionResult is not empty
  ignore_errors: yes
  assert:
    that:
      - transmissionResult is defined and transmissionResult != ""
    msg: "Failed- transmissionResult was not found in Inbound"
  when: file != "/test-materials/validation_test_suite/invalid/image_example.jpg.xml"
  register: result

- name: test case when inbound rejects invalid message and transmissionResult is not set
  set_fact: inbound_result="Inbound rejected message"
  when: file == "/test-materials/validation_test_suite/invalid/image_example.jpg.xml"

- set_fact: inbound_result="{{result.msg}}"
  when: result.msg is defined
- debug: var=inbound_result

#report START ------:
- set_fact: counter="{{counter| int +1 }}"
  register: counter

- debug: var=counter

- name: create report headers
  delegate_to: localhost
  lineinfile:
    create: yes
    dest: "{{report_path}}/inbound-invalid-report-{{ansible_date_time.iso8601_basic}}.csv"
    state: present
    line: "Test num.,Test file,transmissionId,inbound result,preprocessing result,internal-routing result,validator result,email-notificator result"

- name: update test results
  delegate_to: localhost
  lineinfile:
    create: no
    dest: "{{report_path}}/inbound-invalid-report-{{ansible_date_time.iso8601_basic}}.csv"
    state: present
    line: "{{counter}},{{file}},{{transmissionId}},{{inbound_result}}"
#report END -------
...
