---
#                                         s/.            ./s
#                                          y.+/.        ./+.y
#                                ./.-.     y  .+/.    ./+.  y      +./-
#                                .:sy:     y    .//  //.    y     .hy+.
#                                 .../+.+  y      s..s      y  +-/+.
#                                    ./sy. s.     s..s     .y .os+-
#                                       ./+-//.   s..s   .+/.//.
#                           .+y/::::::::+:.:+-/+. s..s .+/.//.:+::::::::/y+.
#                             .+/.       .+:.:+-/+y..y+/.//.:+.       ./+.
#                               .+/.       .+:.:+-/.././/.:+.       ./+.
#                                 .+/::::::::+y:.:ooo+/.:y+:::::::://.
#                                   ............ :hhhh: ............
#                                 .+/-------:+s:.+/++:+-:s+--------/+.
#                               .+:        -+:.+/./../.:+-:+-        :+.
#                             .+:        -+:.+/.//y..y//.:+-:+-        :+.
#                           .+s/::::::::+-.+/.//. s..s .//.-+-:+::::::::/s+.
#                                     ..-+:.//.   s..s   .//.-+-...
#                                     :sy. y.     s..s     .y  ss+-
#                                 -::+: :. y      s..s      y  :.-+:--.
#                                 -+o/     y    .+:  :+.    y     .yo/.
#                                .: ..     y  .+:      :+.  y      - -.
#                                          y-+:          :+-y
#                                          s:              :s

#Author: Martins Berzins
#Date: 2018

# generate uuid with shell for FIRST file
- set_fact: uuidf="{{99999 | random | to_uuid}}"
- name: debug uuidf
  debug: var=uuidf

- name: Copy file to storage/performance-tests
  become: "{{sudo}}"
  become_user: "{{user}}"
  copy:
    remote_src: True
    src: "{{file}}"
    dest: "/peppol/data/storage/performance-tests/tmp/{{ file| basename }}-{{ uuidf }}.xml"
- name: debug filename
  debug: var=file

- set_fact: first_filename="/peppol/data/storage/performance-tests/tmp/{{ file| basename  }}-{{ uuidf }}.xml"
- name: debug first_filename
  debug: var=first_filename

# generate uuid with shell for LAST file
- set_fact: uuidl="{{99999 | random | to_uuid}}"
- name: debug uuidl
  debug: var=uuidl

- name: Copy file to storage/performance-tests
  become: "{{sudo}}"
  become_user: "{{user}}"
  copy:
    remote_src: True
    src: "{{file}}"
    dest: "/peppol/data/storage/performance-tests/tmp/{{ file| basename }}-{{ uuidl }}.xml"
- name: debug LAST filename
  debug: var=file

- set_fact: last_filename="/peppol/data/storage/performance-tests/tmp/{{ file| basename  }}-{{ uuidl }}.xml"
- name: debug last_filename
  debug: var=last_filename

- name: stop validator
  shell: docker stop validator
- name: stop preprocessing
  shell: docker stop preprocessing

#send FIRST msg:
- name: send FIRST msg to MQ
  become: "{{sudo}}"
  become_user: "{{user}}"
  shell: rabbitmqadmin publish exchange=peppol routing_key=validator payload="{{ load_tests_first_rabbit }}"
  environment:
    PATH: /home/peppol/bin:{{ ansible_env.PATH }}

#- name: debug load_tests_first_rabbit
#  debug: var=load_tests_first_rabbit
#- name: debug load_tests_middle_rabbit
#  debug: var=load_tests_middle_rabbit
#- name: debug load_tests_last_rabbit
#  debug: var=load_tests_last_rabbit

#send 98 other msg:
- name: send msg to MQ
  become: "{{sudo}}"
  become_user: "{{user}}"
  shell: rabbitmqadmin publish exchange=peppol routing_key=validator payload="{{ load_tests_middle_rabbit }}"
  with_sequence: count="{{ msg_count }}"
  environment:
    PATH: /home/peppol/bin:{{ ansible_env.PATH }}

#- name: generate uuid with shell
- set_fact: uuidl="{{99999 | random | to_uuid}}"
- name: debug uuidl
  debug: var=uuidl

- name: Copy file to storage/performance-tests
  become: "{{sudo}}"
  become_user: "{{user}}"
  copy:
    remote_src: True
    src: "{{file}}"
    dest: "/peppol/data/storage/performance-tests/tmp/{{ file| basename }}-{{ uuidl }}.xml"
- name: debug LAST filename
  debug: var=file

- set_fact: last_filename="/peppol/data/storage/performance-tests/tmp/{{ file| basename  }}-{{ uuidl }}.xml"
- name: debug last_filename
  debug: var=last_filename

#send LAST msg:
- name: send LAST msg to MQ
  become: "{{sudo}}"
  become_user: "{{user}}"
  shell: rabbitmqadmin publish exchange=peppol routing_key=validator payload="{{ load_tests_last_rabbit }}"
  environment:
    PATH: /home/peppol/bin:{{ ansible_env.PATH }}

- name: start validator
  shell: docker start validator

#- name: Read in FIRST processing timestamp
- name: get validator log & check if FIRST "{{ uuidf }}" is found in validator
  ignore_errors: yes
  shell: docker logs validator | grep "Processing message.*{{ uuidf }}"
  register: logf
  until: 'uuidf in logf.stdout'
  retries: "{{ wait_time }}"
  delay: 1
- name: debug FIRST grep
  debug: var=logf.stdout
- name: get timestamp
  shell: echo "{{ logf.stdout }}" | awk '{sub(/INFO.*/,x)}1' | cut -b 1-19
  register: first_timestamp
- set_fact: first_timestamp="{{ first_timestamp.stdout }}"
- name: debug FIRST timestamp
  debug: var=first_timestamp
 

#- name: Read in LAST processing timestamp
- name: get validator log & check if LAST "{{ uuidl }}" is found in validator
  ignore_errors: yes
  shell: docker logs validator | grep "Validation passed for.*{{ uuidl }}"
  register: logl
  until: 'uuidl in logl.stdout'
  retries: "{{ wait_time }}"
  delay: 1
- name: debug LAST grep
  debug: var=logl.stdout
- name: get timestamp
  shell: echo "{{ logl.stdout }}" | awk '{sub(/INFO.*/,x)}1' | cut -b 1-19
  register: last_timestamp
- set_fact: last_timestamp="{{ last_timestamp.stdout }}"
- name: debug LAST timestamp
  debug: var=last_timestamp

#rc is response code for shell commands 0=success and anything else=failed
- set_fact: first_timestamp="1987-01-01 23:00:00"
  when: logf.rc != 0
- set_fact: last_timestamp="8001-01-01 23:00:00"
  when: logl.rc != 0

- name: start preprocessing
  shell: docker start preprocessing

- name: calculate processing time
  set_fact: proc_time="{{ ((last_timestamp | to_datetime) - (first_timestamp | to_datetime)).seconds }}"
- name: debug processing time
  debug: var=proc_time

#Failure case- compare test run processing time vs etalon
- name: compare test run processing time vs etalon
  set_fact: test_result="Failed- {{ module }} processing time is {{ proc_time }} seconds and it is slower than etalon- {{ etalon }} seconds expected"
  when:
    - etalon|int <  proc_time|int
- name: Failure case- test result
  debug: var=test_result

#Success case- compare test run processing time vs etalon
- name: compare test run processing time vs etalon
  set_fact: test_result="Passed- {{ module }} processing time is {{ proc_time }} seconds, etalon {{ etalon }} seconds expected"
  when:
    - etalon|int >= proc_time|int
- name: Success case test result
  debug: var=test_result
#-------------------------------
#      REPORT
#-------------------------------
- name: create report headers
  delegate_to: localhost
  lineinfile:
    create: yes
    dest: "{{report_path}}/{{ msg_type }}-load-test-report-{{ansible_date_time.date}}.csv"
    state: present
    line: "Module name,Processing start,Processing end,msg_count,msg_type,Processing time (sec),etalon,Test result"

- name: update test results
  delegate_to: localhost
  lineinfile:
    create: yes
    dest: "{{report_path}}/{{ msg_type }}-load-test-report-{{ansible_date_time.date}}.csv"
    state: present
    line: "{{ module }},{{ first_timestamp }},{{ last_timestamp }},{{ msg_count }},{{ msg_type }},{{ proc_time }},{{ etalon }},{{ test_result }}"

#checking for failures in report- test has to fail if any asseert has failed #
- debug:
    var: report_path
- name: register report
  delegate_to: localhost
  shell: cat "{{report_path}}/{{ msg_type }}-load-test-report-{{ansible_date_time.date}}.csv"
  register: report

- debug:
    var: report

#- name: check if any assert has failed up until now
#  fail: msg="Load test for {{ msg_type }} files have failed!"
#  when:
#    - "'Failed' in report.stdout"

#-------------------------------

- name: check if comparision failed
  fail: msg="Load test for {{ msg_type }} files have failed!"
  when:
    - "'Failed' in test_result"


...
