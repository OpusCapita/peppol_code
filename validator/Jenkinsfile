#!groovy
def releaseVersion
def tag = "latest"

// additional properties loaded from file
def properties  

node {
    stage('Build') {
        dir('src') {
            // get latest version of code
            git 'http://nocontrol.itella.net/gitbucket/git/Peppol/peppol2.0.git'

            // assemble modules
            sh 'bash gradlew clean validator:assemble'
            dir('validator/build/libs') {
                archiveArtifacts artifacts: 'validator.jar'
                stash includes: 'validator.jar', name: 'validator'
            }
            
            // load additional properties
            properties = loadProperties('gradle.properties')
            releaseVersion = properties.version
            tag = "${releaseVersion}-${env.BUILD_NUMBER}"
        } 
        dir('infra') {
            // get latest version of infrastructure
            git branch: 'develop', url: 'http://nocontrol.itella.net/gitbucket/git/Peppol/infrastructure.git'
            dir('ap/ansible') {
                sh 'make requirements'
            }
        }

    }

    stage('Unit Test') {
        dir('src') {
            // check modules
            sh 'bash gradlew validator:check'
        }
    }

    milestone label: 'staging'
    stage('Deploy to Stage') {
        dir('infra/ap/ansible') {
            dir('roles/validator/files') {
                unstash 'validator'
            }
            ansiblePlaybook('validator.yml', 'stage.hosts', 'ansible-sudo-x')
        }
    }

    stage('Smoke Test') {
        dir('infra/ap/ansible') {
            ansiblePlaybook('test-peppol-validator.yml', 'stage.hosts', 'ansible-sudo-x')
        }
    }
}

milestone label: 'acceptance'
stage('Acceptance Test') {
    timeout(time: 3, unit: 'DAYS') {
        input message: 'Deploy validator to production?', ok: 'Sure'
    }
}

milestone label: 'production'
stage('Deploy to Production') {
    node {
        dir('infra/ap/ansible') {
            dir('roles/validator/files') {
                unstash 'validator'
            }
            ansiblePlaybook('validator.yml', 'production.hosts', 'ansible-sudo-x')
        }
    }
}


// TODO: move to global pipeline lib
def Properties loadProperties(String filename) {
    Properties properties = new Properties()
    String content = readFile "${filename}"
    properties.load(new StringReader(content));
    return properties
}

def ansiblePlaybook(playbook, hosts, credentials) {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: credentials, passwordVariable: 'ANSIBLE_PASSWORD', usernameVariable: 'ANSIBLE_USERNAME']]) {
        sh "ansible-playbook -i '${hosts}' --user='${ANSIBLE_USERNAME}' --extra-vars 'ansible_sudo_pass=${ANSIBLE_PASSWORD}' ${playbook}"
    }
}
